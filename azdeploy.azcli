#az login


# Set Service Name, Region and artifacts location for deployment
echo $(date) :: "Script Started"
svcname="gwall"  # Prod, App Wallet
azreg="westeurope"
_artifactsLocation="https://vmssscriptsroot.blob.core.windows.net"
_artifactsLocationsubfolder="vmss"
_artifactsLocationSasToken="sp=r&st=2018-09-28T14:16:58Z&se=2019-07-31T22:16:58Z&spr=https&sv=2017-11-09&sig=6c1U%2B%2BI5zyohuSA61CGyjkK301cTlhPTsKQH1YEr%2FyY%3D&sr=b"
customscriptname="helloWorld.ps1"

# Network Variables (assumes vnet and subnets pre-created)
vnet="/subscriptions/9a076c3b-efe6-41fc-8586-f2143f2ad975/resourceGroups/storage/providers/Microsoft.Network/virtualNetworks/vnet1/"
subnetappgw="/subscriptions/9a076c3b-efe6-41fc-8586-f2143f2ad975/resourceGroups/storage/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/appgw"
subnetvmss="/subscriptions/9a076c3b-efe6-41fc-8586-f2143f2ad975/resourceGroups/storage/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/vmss"

# Resource Tags 
Deployment="Dev"
Version="1.2"

# Create Resource Group to contain all service components for the region, check for existence
echo $(date) :: "Resource Group Operations Started"
rgcnt=($(az group list --query "[? name == '$svcname']".{name:name} -o tsv))
rgcnt=${#rgcnt[@]}
if [ "$rgcnt" = "0" ]
then
  echo Resource Group count is $rgcnt, proceeding with Resource Group creation
  az group create --name $svcname --location $azreg
else
  echo Resource Group present, continuing to next section
fi
echo $(date) :: "Resource Group Operations Ended"

# Create application gateway, check for existence
echo $(date) :: "Application Gateway Operations Started"
appgwcnt=($(az network application-gateway list --query "[? name == '$svcname' && tags.ServiceName == '$svcname' && tags.Deployment == '$Deployment'].{name:name}" -o tsv ))
appgwcnt=${#appgwcnt[@]}
if [ "$appgwcnt" = "0" ]
then
  echo Application Gateway count is $appgwcnt, proceeding with Application Gateway creation
  az group deployment create --resource-group $svcname --template-file appgw.json --parameters appgw.parameters.json --parameters '{"location":{"value":"'$azreg'"}, "subnetID":{"value":"'$subnetappgw'"}, "ServiceName":{"value":"'$svcname'"}, "Deployment":{"value":"'$Deployment'"}}'
else
  echo Application Gateway present, continuing to next section
fi
echo $(date) :: "Application Gateway Operations Ended"

# Create vmss, check for existence
echo $(date) :: "VMSS Operations Started"
vmsscnt=($(az vmss list --resource-group $svcname --query "[? tags.ServiceName == '$svcname' && tags.Deployment == '$Deployment'].{name:name}" -o tsv))
vmsscnt=${#vmsscnt[@]}
if [ "$vmsscnt" = "0" ]
then
  echo vmsscnt is $vmsscnt, deploying 2 vmss objects
  
  # Create Green Deployment, attach to application gateway
  vmssname="$svcname""1"
  BlueGreen="Green"
  echo building vmss $vmssname and setting to $BlueGreen 
  az group deployment create --resource-group $svcname --template-file vmss.json --parameters vmss.parameters.json --parameters '{"vmssname":{"value":"'$vmssname'"}, "_artifactsLocation":{"value":"'$_artifactsLocation'"}, "_artifactsLocationsubfolder":{"value":"'$_artifactsLocationsubfolder'"}, "_artifactsLocationSasToken":{"value":"'$_artifactsLocationSasToken'"}, "customscriptname":{"value":"'$customscriptname'"}, "ServiceName":{"value":"'$svcname'"},"Deployment":{"value":"'$Deployment'"},"Version":{"value":"'$Version'"},"BlueGreen":{"value":"'$BlueGreen'"},"subnetId":{"value":"'$subnetvmss'"}}'
  # Obtain IP address vmss Green Load Balancer
  greenIP=($(az network lb list -o table --query "[? tags.BlueGreen == '$BlueGreen' && tags.ServiceName == '$svcname' && tags.Deployment == '$Deployment'].{ip:frontendIpConfigurations[0].privateIpAddress}" -o tsv))
  echo Green IP addr: $greenIP
  # Attach Green vmss to Application Gateway
  echo attaching Green vmss $vmssname $greenIP to Application Gateway $svcname
  az network application-gateway address-pool update --resource-group $svcname --gateway-name $svcname --name appGatewayBackendPool --servers $greenIP
  # Create Blue Deployment, do not attach to applicaiton gateway
  vmssname="$svcname""2"
  BlueGreen="Blue"
  echo building vmss $vmssname and setting to $BlueGreen 
  az group deployment create --resource-group $svcname --template-file vmss.json --parameters vmss.parameters.json --parameters '{"vmssname":{"value":"'$vmssname'"}, "_artifactsLocation":{"value":"'$_artifactsLocation'"}, "_artifactsLocationsubfolder":{"value":"'$_artifactsLocationsubfolder'"}, "_artifactsLocationSasToken":{"value":"'$_artifactsLocationSasToken'"}, "customscriptname":{"value":"'$customscriptname'"}, "ServiceName":{"value":"'$svcname'"},"Deployment":{"value":"'$Deployment'"},"Version":{"value":"'$Version'"},"BlueGreen":{"value":"'$BlueGreen'"},"subnetId":{"value":"'$subnetvmss'"}}'
  
elif [ "$vmsscnt" = "1" ]
then
  echo vmsscnt is $vmsscnt, deploying 1 vmss objects and swapping

  # Get current vmssname and load balancer nameand set new one
  curvmssname=($(az vmss list --resource-group $svcname --query "[? tags.ServiceName == '$svcname' && tags.Deployment == '$Deployment'].{name:name}" -o tsv))
  curlbname=($(az network lb list --resource-group $svcname --query "[? tags.ServiceName == '$svcname' && tags.Deployment == '$Deployment'].{name:name}" -o tsv))
  echo current vmssname is $curvmssname, current load balancer name is $curlbname 
  if [ "$curvmssname" == "$svcname""1" ]
  then
    
    # Create Green Deployment, attach to application gateway
    vmssname="$svcname""2"
    BlueGreen="Green"
    echo building vmss $vmssname and setting to $BlueGreen 
    az group deployment create --resource-group $svcname --template-file vmss.json --parameters vmss.parameters.json --parameters '{"vmssname":{"value":"'$vmssname'"}, "_artifactsLocation":{"value":"'$_artifactsLocation'"}, "_artifactsLocationsubfolder":{"value":"'$_artifactsLocationsubfolder'"}, "_artifactsLocationSasToken":{"value":"'$_artifactsLocationSasToken'"}, "customscriptname":{"value":"'$customscriptname'"}, "ServiceName":{"value":"'$svcname'"},"Deployment":{"value":"'$Deployment'"},"Version":{"value":"'$Version'"},"BlueGreen":{"value":"'$BlueGreen'"},"subnetId":{"value":"'$subnetvmss'"}}'
  
    # Set current vmss and load balancer to Blue
    curBlueGreen="Blue"
    echo setting vmss $curvmssname and load balancer $curlbname to $curBlueGreen 
    az network lb update --resource-group $svcname --name $curlbname --set tags.BlueGreen="'$curBlueGreen'"
    az vmss update --resource-group $svcname --name $curvmssname --set tags.BlueGreen="'$curBlueGreen'"
    
    # Obtain IP address vmss Green Load Balancer
    greenIP=($(az network lb list -o table --query "[? tags.BlueGreen == '$BlueGreen' && tags.ServiceName == '$svcname' && tags.Deployment == '$Deployment'].{ip:frontendIpConfigurations[0].privateIpAddress}" -o tsv))
    echo Green IP addr: $greenIP
    
    # Attach Green vmss to Application Gateway
    echo attaching Green vmss $vmssname $greenIP to Application Gateway $svcname
    az network application-gateway address-pool update --resource-group $svcname --gateway-name $svcname --name appGatewayBackendPool --servers $greenIP
    
  elif [ "$curvmssname" == "$svcname""2" ]
  then
  
    # Create Green Deployment, attach to application gateway
    vmssname="$svcname""1"
    BlueGreen="Green"
    echo building vmss $vmssname and setting to $BlueGreen 
    az group deployment create --resource-group $svcname --template-file vmss.json --parameters vmss.parameters.json --parameters '{"vmssname":{"value":"'$vmssname'"}, "_artifactsLocation":{"value":"'$_artifactsLocation'"}, "_artifactsLocationsubfolder":{"value":"'$_artifactsLocationsubfolder'"}, "_artifactsLocationSasToken":{"value":"'$_artifactsLocationSasToken'"}, "customscriptname":{"value":"'$customscriptname'"}, "ServiceName":{"value":"'$svcname'"},"Deployment":{"value":"'$Deployment'"},"Version":{"value":"'$Version'"},"BlueGreen":{"value":"'$BlueGreen'"},"subnetId":{"value":"'$subnetvmss'"}}'
  
    # Set current vmss and load balancer to Blue
    curBlueGreen="Blue"
    echo setting vmss $curvmssname and load balancer $curlbname to $curBlueGreen 
    az network lb update --resource-group $svcname --name $curlbname --set tags.BlueGreen="'$curBlueGreen'"
    az vmss update --resource-group $svcname --name $curvmssname --set tags.BlueGreen="'$curBlueGreen'"
    
    # Obtain IP address vmss Green Load Balancer
    greenIP=($(az network lb list -o table --query "[? tags.BlueGreen == '$BlueGreen' && tags.ServiceName == '$svcname' && tags.Deployment == '$Deployment'].{ip:frontendIpConfigurations[0].privateIpAddress}" -o tsv))
    echo Green IP addr: $greenIP
  
    # Attach Green vmss to Application Gateway
    echo attaching Green vmss $vmssname $greenIP to Application Gateway $svcname
    az network application-gateway address-pool update --resource-group $svcname --gateway-name $svcname --name appGatewayBackendPool --servers $greenIP
    
  else
    echo Problem with vmssname due to unexpected format: $curvmssname
  fi  

elif [ "$vmsscnt" = "2" ]
then
  echo vmsscnt is $vmsscnt, redeploying BLUE vmss object and swapping

  # Determine existing Blue and Green delpoyment state
  BlueGreen="Blue"
  curbluevmssname=($(az vmss list --resource-group $svcname --query "[? tags.ServiceName == '$svcname' && tags.Deployment == '$Deployment' && tags.BlueGreen == '$BlueGreen'].{name:name}" -o tsv))
  curbluelbname=($(az network lb list --resource-group $svcname --query "[? tags.ServiceName == '$svcname' && tags.Deployment == '$Deployment' && tags.BlueGreen == '$BlueGreen'].{name:name}" -o tsv))
  echo current Blue vmssname is $curbluevmssname, current Blue load balancer name is $curbluelbname 
  BlueGreen="Green"
  curgreenvmssname=($(az vmss list --resource-group $svcname --query "[? tags.ServiceName == '$svcname' && tags.Deployment == '$Deployment' && tags.BlueGreen == '$BlueGreen'].{name:name}" -o tsv))
  curgreenlbname=($(az network lb list --resource-group $svcname --query "[? tags.ServiceName == '$svcname' && tags.Deployment == '$Deployment' && tags.BlueGreen == '$BlueGreen'].{name:name}" -o tsv))
  echo current Green vmssname is $curgreenvmssname, current Green load balancer name is $curgreenlbname 
  
  # Redeploy Blue vmss
  BlueGreen="Blue"
  vmssname="$curbluevmssname"
  az group deployment create --resource-group $svcname --template-file vmss.json --parameters vmss.parameters.json --parameters '{"vmssname":{"value":"'$vmssname'"}, "_artifactsLocation":{"value":"'$_artifactsLocation'"}, "_artifactsLocationsubfolder":{"value":"'$_artifactsLocationsubfolder'"}, "_artifactsLocationSasToken":{"value":"'$_artifactsLocationSasToken'"}, "customscriptname":{"value":"'$customscriptname'"}, "ServiceName":{"value":"'$svcname'"},"Deployment":{"value":"'$Deployment'"},"Version":{"value":"'$Version'"},"BlueGreen":{"value":"'$BlueGreen'"},"subnetId":{"value":"'$subnetvmss'"}}'
  blueIP=($(az network lb list -o table --query "[? tags.BlueGreen == '$BlueGreen' && tags.ServiceName == '$svcname' && tags.Deployment == '$Deployment'].{ip:frontendIpConfigurations[0].privateIpAddress}" -o tsv))
  echo Blue IP addr: $blueIP

  # Swap Blue and Green Tags, update IP
  BlueGreen="Green"
  echo setting Blue vmss $curbluevmssname and Blue load balancer $curbluevmssname to Green
  az network lb update --resource-group $svcname --name $curbluelbname --set tags.BlueGreen="'$BlueGreen'"
  az vmss update --resource-group $svcname --name $curbluevmssname --set tags.BlueGreen="'$BlueGreen'"
  BlueGreen="Blue"
  echo setting Green vmss $curgreenvmssname and Blue load balancer $curgreenvmssname to Blue
  az network lb update --resource-group $svcname --name $curgreenlbname --set tags.BlueGreen="'$BlueGreen'"
  az vmss update --resource-group $svcname --name $curgreenvmssname --set tags.BlueGreen="'$BlueGreen'"
    
  # Attach new Green vmss to Application Gateway
  greenIP=$blueIP
  echo attaching new Green vmss $vmssname $greenIP to Application Gateway $svcname
  az network application-gateway address-pool update --resource-group $svcname --gateway-name $svcname --name appGatewayBackendPool --servers $greenIP
   
else
  echo Problem with vmsscnt, value is $vmsscnt
fi
echo $(date) :: "VMSS Operations Ended"
